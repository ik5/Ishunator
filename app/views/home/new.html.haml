-# coding: UTF-8
- unless @complaint.errors.empty?
  = div_for(@complaint, :class => "alert-message block-message error") do
    %p
      %strong
        = t('new.form_error')
    %ul
      - @complaint.errors.full_messages.each do |e|
        %li= e
= form_for(@complaint, :html => { :multipart => true }) do |f|
  .field
    = label_tag(:complaint_statement_full_name) do
      = t('new.full_name')
      %sup
        = t('new.mandatory')
    = f.text_field(:statement_full_name)
  .field
    = label_tag(:complaint_statement_email) do
      = t('new.email')
      %sup
        = t('new.mandatory')
    = f.text_field(:statement_email)
  .field
    = label_tag(:complaint_statement_id) do
      = t('new.id_number')
      %sup
        = t('new.mandatory')
    = f.text_field(:statement_id, :length => 10)
  .field
    = label_tag(:complaint_statement_phone) do
      = t('new.phone_number')
      %sup
        = t('new.mandatory')
    = f.text_field(:statement_phone)
  .field
    = label_tag(:complaint_statement_address) do
      = t('new.address')
      %sup.recommended
        = t('new.recommended')
    = f.text_field(:statement_address)
  %fieldset
    %legend
      = t('new.case_details')
    .field
      = f.label(:event_date, t('new.event_date'))
      .date-select
        = f.date_select(:event_date, :start_year => 2007, :end_year => Time.now.year,
                        :use_month_numbers => true, :order => [:day, :month, :year])
    .field
      = f.label(:business_type_id, t('activerecord.attributes.complaint.business_type'))
      = f.collection_select(:business_type_id, BusinessType.all, :id, :name)
      .details{ "data-toggleon" => "complaint_business_type_id", "data-togglevalue" => 13}
        = f.label(:business_type_other, t('new.details'))
        = f.text_field(:business_type_other)
    .field
      = label_tag(:complaint_business_name) do
        = t('activerecord.attributes.complaint.business_name')
        %sup
          = t('new.mandatory')
      = f.text_field(:business_name)
    .field
      = label_tag(:complaint_business_address) do
        = t('activerecord.attributes.complaint.business_address')
        %sup
          = t('new.mandatory')
      = f.text_field(:business_address)
    :markdown
      #{t('new.locate_business')}
    .field
      = label_tag(:complaint_private_company_number) do
        = raw t('new.private_company_abbr')
        %sup.recommended
          = t('new.recommended')
        %sup.info
          ?
          .popover.left
            .arrow
            .popover-inner
              .popover-content
                %p
                  = t('new.where_find')
                = image_tag('receipt.png', :alt => t('new.receipt'))
      = f.text_field(:private_company_number)
    .field
      = label_tag(:complaint_business_number) do
        = raw t('new.business_abbr')
        %sup.recommended
          = t('new.recommended')
        %sup.info
          ?
          .popover.left
            .arrow
            .popover-inner
              .popover-content
                %p
                  = t('new.where_find')
                = image_tag('receipt.png', :alt => t('new.receipt'))
      = f.text_field(:business_number)
    .field
      = label_tag(:complaint_city_id) do
        = t('new.location_type')
        %sup
          = t('new.mandatory')
      -# f.collection_select(:city_id, City.all, :id, :name, :prompt => t('new.select_city'))
      = f.collection_select(:city_id, [ City.find(227) ], :id, :name)
  %fieldset
    %legend
      = t('new.business_person_force')
    %ul.check-list
      %li
        = f.check_box(:smoking_person)
        = f.label(:smoking_person, t('new.smoking_person'))
      %li
        = f.check_box(:smoking_ashtrays)
        = f.label(:smoking_ashtrays, t('new.smoking_ashtrays'))
        .details{ "data-toggleon" => "complaint_smoking_ashtrays" }
          = f.label(:smoking_ashtrays_details, t('new.smoking_ashtrays_details'))
          = f.text_field(:smoking_ashtrays_details)
  %fieldset
    %legend
      = t('new.illegal_place')
    %ul.check-list
      %li
        = f.check_box(:smoking_room_not_seperate)
        = f.label(:smoking_room_not_seperate, t('new.smoking_room_not_seperate'))
      %li
        = f.check_box(:smoking_room_too_large)
        = f.label(:smoking_room_too_large, t('new.smoking_room_too_large'))
      %li
        %ul.inline-check-list
          %li
            = t('new.passing_through')
          %li
            = f.check_box(:smoking_room_must_pass_through_to_public_area)
            = f.label(:smoking_room_must_pass_through_to_public_area, t('new.smoking_room_must_pass_through_to_public_area'))
          %li
            = f.check_box(:smoking_room_must_pass_through_to_bathroom)
            = f.label(:smoking_room_must_pass_through_to_bathroom, t('new.smoking_room_must_pass_through_to_bathroom'))
          %li
            = check_box_tag(:smoking_room_must_pass_through_to_other_check)
            = label_tag(:smoking_room_must_pass_through_to_other_check, t('new.smoking_room_must_pass_through_to_other_check'))
        .details{ "data-toggleon" => "smoking_room_must_pass_through_to_other_check" }
          = f.label(:smoking_room_must_pass_through_to_other, t('new.smoking_room_must_pass_through_to_other'))
          = f.text_field(:smoking_room_must_pass_through_to_other)
      %li
        = f.check_box(:smoking_room_not_closed)
        = f.label(:smoking_room_not_closed, t('new.smoking_room_not_closed'))
      %li
        = check_box_tag(:smoking_room_smoking_outside_details_check)
        = label_tag(:smoking_room_smoking_outside_details_check, t('new.smoking_room_smoking_outside_details_check'))
        .details{ "data-toggleon" => "smoking_room_smoking_outside_details_check" }
          = f.label(:smoking_room_smoking_outside_details, t('new.smoking_room_smoking_outside_details'))
          = f.text_field(:smoking_room_smoking_outside_details)
  %fieldset
    %legend
      = t('new.no_smoking_sign_missing')
    %ul.check-list
      %li
        = f.check_box(:smoking_no_signs)
        = f.label(:smoking_no_signs, t('new.smoking_no_signs'))
      %li
        = f.check_box(:smoking_signs_too_small)
        = f.label(:smoking_signs_too_small, t('new.smoking_signs_too_small'))
      %li
        = f.check_box(:smoking_signs_not_at_height)
        = f.label(:smoking_signs_not_at_height, t('new.smoking_signs_not_at_height'))
      %li
        = check_box_tag(:smoking_signs_hidden_details_check)
        = label_tag(:smoking_signs_hidden_details_check, t('new.smoking_signs_hidden_details_check'))
        .details{ "data-toggleon" => "smoking_signs_hidden_details_check" }
          = f.label(:smoking_signs_hidden_details, t('new.details'))
          = f.text_field(:smoking_signs_hidden_details)
    :markdown
      #{t('new.signs_regulation')}
  %fieldset
    %legend
      = t('new.additional_details')
    .field
      = label_tag(:complaint_smoking_comment) do
        = t('new.comments')
        %sup
          = t('new.mandatory')
      = f.text_area(:smoking_comment, :size => '80x5')
    .field.image-upload
      = label_tag(:complaint_images) do
        = t('new.image')
        %sup.recommended
          = t('new.attach_images')
      = f.file_field(:complaint_images, :accept => 'image/*', :multiple => true)
  %fieldset{ :class => "statement" }
    %legend
      = t('new.declaration')
    %p
      = t('new.declaration_details')
    %ul.check-list
      %li
        = f.check_box(:statement_agreement, :checked => true)
        = label_tag(:complaint_statement_agreement) do
          = t('new.court')
          %sup.recommended
            = t('new.recommended')
  = f.submit(t('submit'), :class => "btn btn-primary")

- content_for(:scripts) do
  :javascript
    $(function() {

      $('a[href^="http://"]').on('click', function() {
        window.open(this.href);
        return false;
      });

      function supportsMultiple() {
        var f = document.createElement('input'); f.type = 'file';

        return (!!(f.multiple === false) && !!(f.multiple !== 'undefined'));
      };

      var upload = $('.image-upload'),
          addFileUpload = function() {
            var attrReplace = function(index, attr) { return attr + i; },
                clone = upload.clone();

            clone
              .find('label').attr('for', attrReplace).end()
              .find('input:file').attr('id', attrReplace);

            $(this).before( clone );

            i++;

            return false;
          },
          addFileButton,
          count = 4,
          i; // Index counter for the upload fields.

      if ( ! supportsMultiple() ) {
        upload.find('sup').remove();

        while(i <= count) {
          addFileUpload.call(upload);
        }

        addFileButton = $('<button id="add-image-upload" class="btn btn-primary">#{t('new.extra_button')}</button>').on('click', addFileUpload);

        upload.after(addFileButton);
      }
    });
